{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.1",
  "parameters": {
    "vnetID": {
      "type":"string"
    },
    "resourceAPIVersion":{
      "type":"string"
    },
    "dnsNamePrefix": {
      "type": "string"
    },
    "scriptsUri": {
      "type": "string"
    },
    "storageAccount": {
      "type": "object"
    },
    "vmCount": {
      "type": "int"
    },
    "vmSpec": {
      "type": "secureobject"
    },
    "networkSpec": {
      "type": "object"
    },
    "clusterSpec": {
      "type": "object"
    }
  },
  "variables": {
    "singleQuote": "'",
    "masterIP":"[parameters('networkSpec').masterIP]",
    "workerIP":"[parameters('networkSpec').workerIP]",
    "vmName": "[concat(parameters('dnsNamePrefix'), '-mn')]",
    "nicName": "[concat(variables('vmName'), '-nic')]",
    "publicIPAddressName": "[concat(variables('vmName'), '-publicIP')]",
    "storageAccountName": "[parameters('storageAccount').prefix]",
    "securityGroupName": "[concat(parameters('dnsNamePrefix'), '-mn-sg')]",
	"localResourceAPIVersion" : "2016-04-30-preview"
  },
  "resources": [
    {
      "apiVersion": "[parameters('resourceAPIVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('securityGroupName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "SSH",
            "properties": {
              "description": "Allows SSH traffic",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
	{
		"type": "Microsoft.Compute/disks",
		"name": "[concat(uniquestring(concat('osDisk', 'mn', resourceGroup().id)), variables('storageAccountName'))]",
		"apiVersion": "[variables('localResourceAPIVersion')]",
		"location": "[resourceGroup().location]",
		"properties": {
			"accountType": "[parameters('storageAccount').type]",
			"osType": "Linux",
			"creationData": {
				"createOption": "FromImage",
				"imageReference": {
					"publisher": "[variables('imagePublisher')]",
					"offer": "[variables('imageOffer')]",
					"sku": "[variables('centosOSVersion')]",
					"version": "latest"
				}
			},
			"diskSizeGB": 50
		},
		"dependsOn": []
	},
	{
		"type": "Microsoft.Compute/disks",
		"name": "[concat(uniquestring(concat('datadisk0', 'mn', resourceGroup().id)), variables('storageAccountName'))]",
		"apiVersion": "[variables('localResourceAPIVersion')]",
		"location": "[resourceGroup().location]",
		"properties": {
			"accountType": "[parameters('storageAccount').type]",
			"creationData": {
				"createOption": "Empty"
			},
			"diskSizeGB": 1023
		},
		"dependsOn": []
	},
	{
		"type": "Microsoft.Compute/disks",
		"name": "[concat(uniquestring(concat('datadisk1', 'mn', resourceGroup().id)), variables('storageAccountName'))]",
		"apiVersion": "[variables('localResourceAPIVersion')]",
		"location": "[resourceGroup().location]",
		"properties": {
			"accountType": "[parameters('storageAccount').type]",
			"creationData": {
				"createOption": "Empty"
			},
			"diskSizeGB": 1023
		},
		"dependsOn": []
	},
	{
		"type": "Microsoft.Compute/disks",
		"name": "[concat(uniquestring(concat('datadisk2', 'mn', resourceGroup().id)), variables('storageAccountName'))]",
		"apiVersion": "[variables('localResourceAPIVersion')]",
		"location": "[resourceGroup().location]",
		"properties": {
			"accountType": "[parameters('storageAccount').type]",
			"creationData": {
				"createOption": "Empty"
			},
			"diskSizeGB": 1023
		},
		"dependsOn": []
	},
	{
		"type": "Microsoft.Compute/disks",
		"name": "[concat(uniquestring(concat('datadisk3', 'mn', resourceGroup().id)), variables('storageAccountName'))]",
		"apiVersion": "[variables('localResourceAPIVersion')]",
		"location": "[resourceGroup().location]",
		"properties": {
			"accountType": "[parameters('storageAccount').type]",
			"creationData": {
				"createOption": "Empty"
			},
			"diskSizeGB": 1023
		},
		"dependsOn": []
	},
    {
      "apiVersion": "[parameters('resourceAPIVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('publicIPAddressName'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "publicIPLoop",
        "count": "[parameters('vmCount')]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsNamePrefix'), '-mn', copyIndex())]"
        }
      }
    },
    {
      "apiVersion": "[parameters('resourceAPIVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicName'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'), copyIndex())]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('securityGroupName'))]"
      ],
      "copy": {
        "name": "masterNodeNicLoop",
        "count": "[parameters('vmCount')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(parameters('networkSpec').ipOctet01, add(parameters('networkSpec').ipOctet2, div(copyIndex(parameters('networkSpec').ipOctet3), 256)), '.', mod(copyIndex(parameters('networkSpec').ipOctet3), 256))]",
              "subnet": {
                "id": "[concat(parameters('vnetID'), '/subnets/', parameters('networkSpec').virtualNetworkSubnetName)]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressName'), copyIndex()))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('securityGroupName'))]"
        }
      }
    },
    {
      "apiVersion": "[parameters('resourceAPIVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmName'), copyIndex())]",
      "plan": "[parameters('vmSpec').imageInfo.plan]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "masterNodeNicLoop",
        "count": "[parameters('vmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), copyIndex())]",
        "[resourceId('Microsoft.Compute/disks', [concat(uniquestring(concat('osDisk', 'mn', resourceGroup().id)), variables('storageAccountName'))])]",
        "[resourceId('Microsoft.Compute/disks', [concat(uniquestring(concat('datadisk0', 'mn', resourceGroup().id)), variables('storageAccountName'))])]",
		"[resourceId('Microsoft.Compute/disks', [concat(uniquestring(concat('datadisk1', 'mn', resourceGroup().id)), variables('storageAccountName'))])]",
		"[resourceId('Microsoft.Compute/disks', [concat(uniquestring(concat('datadisk2', 'mn', resourceGroup().id)), variables('storageAccountName'))])]",
		"[resourceId('Microsoft.Compute/disks', [concat(uniquestring(concat('datadisk3', 'mn', resourceGroup().id)), variables('storageAccountName'))])]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('vmSpec').masterNodeASName)]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSpec').vmSize]"
        },
        "osProfile": {
          "computerName": "[reference(concat(variables('publicIPAddressName'), copyIndex())).dnsSettings.fqdn]",
          "adminUsername": "[parameters('vmSpec').adminUserName]",
          "adminPassword": "[parameters('vmSpec').adminPassword]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "false"
          }
        },
        "storageProfile": {
          "imageReference": "[parameters('vmSpec').imageInfo.imageReference]",
           "osDisk": {
            "name": "osdisk",
            "osType": "Linux",
			"createOption": "FromImage",
			"caching": "ReadWrite",
			"managedDisk": {
				"storageAccountType": "[parameters('storageAccount').type]",
				"id": "[resourceId('Microsoft.Compute/disks', [concat(uniquestring(concat('osDisk', 'mn', resourceGroup().id)), variables('storageAccountName'))])]"
			},
			"diskSizeGB": 50
          },
          "dataDisks": [
            {
				"name": "datadisk0",
				"diskSizeGB": 1023,
				"lun": 0,
				"createOption": "Attach",
				"caching": "None",
				"managedDisk": {
						"storageAccountType": "[parameters('storageAccount').type]",
						"id": "[resourceId('Microsoft.Compute/disks',[concat(uniquestring(concat('datadisk0', 'mn', resourceGroup().id)), variables('storageAccountName'))])]"
					}
            },
            {
				"name": "datadisk1",
				"diskSizeGB": 1023,
				"lun": 1,
				"createOption": "Attach",
				"caching": "None",
				"managedDisk": {
					"storageAccountType": "[parameters('storageAccount').type]",
					"id": "[resourceId('Microsoft.Compute/disks',[concat(uniquestring(concat('datadisk1', 'mn', resourceGroup().id)), variables('storageAccountName'))])]"
					}
            },
            {
				"name": "datadisk2",
				"diskSizeGB": 1023,
				"lun": 2,
				"createOption": "Attach",
				"caching": "None",
				"managedDisk": {
					"storageAccountType": "[parameters('storageAccount').type]",
					"id": "[resourceId('Microsoft.Compute/disks',[concat(uniquestring(concat('datadisk2', 'mn', resourceGroup().id)), variables('storageAccountName'))])]"
				}
            },
            {
				"name": "datadisk3",
				"diskSizeGB": 1023,
				"lun": 3,
				"createOption": "Attach",
				"caching": "None",
				"managedDisk": {
					"storageAccountType": "[parameters('storageAccount').type]",
					"id": "[resourceId('Microsoft.Compute/disks',[concat(uniquestring(concat('datadisk3', 'mn', resourceGroup().id)), variables('storageAccountName'))])]"
				}
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'), copyIndex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'), copyIndex(), '/prepareDisks')]",
      "apiVersion": "[parameters('resourceAPIVersion')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nameNodeNicLoop",
        "count": "[parameters('vmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), copyIndex())]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[concat(parameters('scriptsUri'), '/scripts/prepare-masternode-disks.sh')]",
            "[concat(parameters('scriptsUri'), '/scripts/initialize-node.sh')]"
          ],
          "commandToExecute": "[concat('sh initialize-node.sh ', variables('singleQuote'), variables('masterIP'), variables('singleQuote'), ' ', variables('singleQuote'), variables('workerIP'), variables('singleQuote'), ' ', variables('singleQuote'), parameters('dnsNamePrefix'), variables('singleQuote'), ' ', variables('singleQuote'), reference(concat(variables('publicIPAddressName'), copyIndex())).dnsSettings.fqdn, variables('singleQuote'), ' ', variables('singleQuote'), parameters('clusterSpec').masterNodeCount, variables('singleQuote'), ' ', variables('singleQuote'), parameters('clusterSpec').dataNodeCount, variables('singleQuote'), ' ', variables('singleQuote'), parameters('vmSpec').adminUserName, variables('singleQuote'), ' ', 'masternode', ' >> /var/log/cloudera-azure-initialize.log 2>&1')]"

        }
      }
    }
  ],
  "outputs": {
    "fqdn": {
      "type": "string",
      "value": "[reference(concat(variables('publicIPAddressName'), '0')).dnsSettings.fqdn]"
    }
  }
}
